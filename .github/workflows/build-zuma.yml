name: Build Zuma and Release

on:
  workflow_dispatch:

jobs:
  build_and_release:
    runs-on: ubuntu-latest
    steps:

      # Step 2: Set up the environment
      - name: Set up the environment
        run: |
          sudo apt update
          sudo apt install -y build-essential git curl patch sed zip

      # Step 3: Create the root folder with a timestamped name
      - name: Create root folder
        run: |
          ROOT_DIR="A15-SultanSU-$(date +'%Y-%m-%d-%I-%M-%p')-release"
          echo "Creating root folder $ROOT_DIR..."
          mkdir -p "$ROOT_DIR"
          cd "$ROOT_DIR"

      # Step 4: Clone the repositories
      - name: Clone the repositories
        run: |
          echo "Cloning repositories..."
          git clone https://github.com/TheWildJames/android_kernel_google_zuma.git -b 15.0.0-sultan
          git clone https://github.com/TheWildJames/AnyKernel3.git -b 15.0.0-sultan-zuma
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android14-5.15
          git clone https://github.com/TheWildJames/kernel_patches.git

      # Step 5: Apply KernelSU
      - name: Apply KernelSU
        run: |
          echo "Applying KernelSU..."
          cd ./android_kernel_google_zuma
          curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next/kernel/setup.sh" | bash -

      # Step 6: Apply SUSFS patches
      - name: Apply SUSFS patches
        run: |
          echo "Applying SUSFS patches..."
          cp ../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./KernelSU-Next/
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android14-5.15.patch ./
          cp ../susfs4ksu/kernel_patches/fs/* ./fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./include/linux/

      # Step 7: Apply the patches
      - name: Apply the patches
        run: |
          echo "Applying patches..."
          cd ./KernelSU-Next
          patch -p1 --fuzz=3 --forward < 10_enable_susfs_for_ksu.patch || true
          cd ..
          patch -p1 --fuzz=3 < 50_add_susfs_in_gki-android14-5.15.patch || true

          cp ../kernel_patches/ksu_hooks.patch ./
          patch -p1 --fuzz=3 < ./ksu_hooks.patch

          cp ../kernel_patches/69_hide_stuff.patch ./
          patch -p1 < 69_hide_stuff.patch

          cp ../kernel_patches/apk_sign.c_fix.patch ./
          patch -p1 -F 3 < apk_sign.c_fix.patch

          cp ../kernel_patches/core_hook.c_fix.patch ./
          patch -p1 --fuzz=3 < ./core_hook.c_fix.patch

          cp ../kernel_patches/selinux.c_fix.patch ./
          patch -p1 --fuzz=3 < ./selinux.c_fix.patch

          cp ../kernel_patches/sys.c_fix.patch ./
          patch -p1 --fuzz=3 < ./sys.c_fix.patch

          cp ../kernel_patches/mount.h_fix.patch ./
          patch -p1 --fuzz=3 < ./mount.h_fix.patch

          cp ../kernel_patches/sched.h_fix.patch ./
          patch -p1 --fuzz=3 < ./sched.h_fix.patch

          cp ../kernel_patches/user.h_fix.patch ./
          patch -p1 --fuzz=3 < ./user.h_fix.patch

      # Step 8: Modify susfs.c with sed
      - name: Modify susfs.c
        run: |
          echo "Modifying susfs.c..."
          sed -i "s/poofed_size: '%u'/poofed_size: '%llu'/g" ./fs/susfs.c
          sed -i "s/length of string: %u/length of string: %lu/g" ./fs/susfs.c

      # Step 9: Add configuration settings to zuma_defconfig
      - name: Add configuration settings to zuma_defconfig
        run: |
          echo "Adding configuration settings to zuma_defconfig..."
          echo "CONFIG_KSU=y" >> ./arch/arm64/configs/zuma_defconfig
          echo "CONFIG_KSU_SUSFS=y" >> ./arch/arm64/configs/zuma_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./arch/arm64/configs/zuma_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=y" >> ./arch/arm64/configs/zuma_defconfig

      # Step 10: Compile the kernel
      - name: Compile the kernel
        run: |
          echo "Compiling the kernel..."
          make zuma_defconfig -j$(nproc --all)
          make -j$(nproc --all)

      # Step 11: Copy Image.lz4 and concatenate DTB files
      - name: Copy Image.lz4 and concatenate DTB files
        run: |
          echo "Copying Image.lz4 and concatenating DTB files..."
          cp ./out/arch/arm64/boot/Image.lz4 ../AnyKernel3/Image.lz4
          cat ./out/google-modules/soc/gs/arch/arm64/boot/dts/google/*.dtb > ../AnyKernel3/dtb

      # Step 12: Navigate to the AnyKernel3 directory
      - name: Navigate to AnyKernel3 directory
        run: |
          echo "Navigating to AnyKernel3 directory..."
          cd ../AnyKernel3

      # Step 13: Create zip file
      - name: Create zip file
        run: |
          ZIP_NAME="A15_Sultan_KernelSU_SUSFS_Zuma_$(date +'%Y_%m_%d_%H_%M_%S').zip"
          echo "Creating zip file $ZIP_NAME..."
          zip -r "../$ZIP_NAME" ./*

      # Step 14: Move back to root directory
      - name: Move back to root directory
        run: |
          cd ..

      # Step 15: Create GitHub Release with custom tag
      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          files: A15_Sultan_KernelSU_SUSFS_Zuma_*.zip
          tag_name: "1.5.3-$(date +'%Y.%m.%d-%H%M%S')"  # Tag updated to 1.5.3-date-time format
          release_name: "Sultan With KernelSU & SUSFS for Zuma"
          body: |
            This release contains KernelSU & SUSFS v1.5.3 & Magic Mount

            Module: 
            https://github.com/sidex15/ksu_module_susfs

            Official Manager:
            https://github.com/tiann/KernelSU

            Non-Official Managers:
            https://github.com/rifsxd/KernelSU-Next
            https://github.com/backslashxx/KernelSU
            https://github.com/rsuntk/KernelSU
            https://github.com/5ec1cff/KernelSU
            https://github.com/silvzr/KernelSU
            https://github.com/sidex15/KernelSU

            Features:
            [+] KernelSU
            [+] SUSFS v1.5.3
            [+] Maphide for LineageOS Detections
            [+] Futile Maphide for jit-zygote-cache Detections
            [+] Magic Mount Support
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Final confirmation
      - name: Final confirmation
        run: |
          echo "Release created with kernel zip file."
          echo "Build and packaging process complete."
